// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/db.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ent "github.com/shipherman/gophermart/generated/ent"
	models "github.com/shipherman/gophermart/internal/models"
)

// MockDBClientInt is a mock of DBClientInt interface.
type MockDBClientInt struct {
	ctrl     *gomock.Controller
	recorder *MockDBClientIntMockRecorder
}

// MockDBClientIntMockRecorder is the mock recorder for MockDBClientInt.
type MockDBClientIntMockRecorder struct {
	mock *MockDBClientInt
}

// NewMockDBClientInt creates a new mock instance.
func NewMockDBClientInt(ctrl *gomock.Controller) *MockDBClientInt {
	mock := &MockDBClientInt{ctrl: ctrl}
	mock.recorder = &MockDBClientIntMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBClientInt) EXPECT() *MockDBClientIntMockRecorder {
	return m.recorder
}

// InsertOrder mocks base method.
func (m *MockDBClientInt) InsertOrder(arg0 models.OrderResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrder indicates an expected call of InsertOrder.
func (mr *MockDBClientIntMockRecorder) InsertOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrder", reflect.TypeOf((*MockDBClientInt)(nil).InsertOrder), arg0)
}

// InsertUser mocks base method.
func (m *MockDBClientInt) InsertUser(arg0 ent.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockDBClientIntMockRecorder) InsertUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockDBClientInt)(nil).InsertUser), arg0)
}

// InsertWithdraw mocks base method.
func (m *MockDBClientInt) InsertWithdraw(arg0 string, arg1 models.WithdrawResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWithdraw", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertWithdraw indicates an expected call of InsertWithdraw.
func (mr *MockDBClientIntMockRecorder) InsertWithdraw(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWithdraw", reflect.TypeOf((*MockDBClientInt)(nil).InsertWithdraw), arg0, arg1)
}

// SelectBalance mocks base method.
func (m *MockDBClientInt) SelectBalance(arg0 string) (models.BalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectBalance", arg0)
	ret0, _ := ret[0].(models.BalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectBalance indicates an expected call of SelectBalance.
func (mr *MockDBClientIntMockRecorder) SelectBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectBalance", reflect.TypeOf((*MockDBClientInt)(nil).SelectBalance), arg0)
}

// SelectFirstUnprocessedOrder mocks base method.
func (m *MockDBClientInt) SelectFirstUnprocessedOrder() (models.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFirstUnprocessedOrder")
	ret0, _ := ret[0].(models.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFirstUnprocessedOrder indicates an expected call of SelectFirstUnprocessedOrder.
func (mr *MockDBClientIntMockRecorder) SelectFirstUnprocessedOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFirstUnprocessedOrder", reflect.TypeOf((*MockDBClientInt)(nil).SelectFirstUnprocessedOrder))
}

// SelectOrderOwner mocks base method.
func (m *MockDBClientInt) SelectOrderOwner(arg0 string) (*models.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOrderOwner", arg0)
	ret0, _ := ret[0].(*models.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOrderOwner indicates an expected call of SelectOrderOwner.
func (mr *MockDBClientIntMockRecorder) SelectOrderOwner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOrderOwner", reflect.TypeOf((*MockDBClientInt)(nil).SelectOrderOwner), arg0)
}

// SelectOrders mocks base method.
func (m *MockDBClientInt) SelectOrders(arg0 string) ([]models.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOrders", arg0)
	ret0, _ := ret[0].([]models.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOrders indicates an expected call of SelectOrders.
func (mr *MockDBClientIntMockRecorder) SelectOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOrders", reflect.TypeOf((*MockDBClientInt)(nil).SelectOrders), arg0)
}

// SelectUser mocks base method.
func (m *MockDBClientInt) SelectUser(arg0 string) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUser", arg0)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUser indicates an expected call of SelectUser.
func (mr *MockDBClientIntMockRecorder) SelectUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUser", reflect.TypeOf((*MockDBClientInt)(nil).SelectUser), arg0)
}

// SelectUserExistence mocks base method.
func (m *MockDBClientInt) SelectUserExistence(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserExistence", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserExistence indicates an expected call of SelectUserExistence.
func (mr *MockDBClientIntMockRecorder) SelectUserExistence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserExistence", reflect.TypeOf((*MockDBClientInt)(nil).SelectUserExistence), arg0, arg1)
}

// SelectWithdrawals mocks base method.
func (m *MockDBClientInt) SelectWithdrawals(arg0 string) ([]models.WithdrawResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectWithdrawals", arg0)
	ret0, _ := ret[0].([]models.WithdrawResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectWithdrawals indicates an expected call of SelectWithdrawals.
func (mr *MockDBClientIntMockRecorder) SelectWithdrawals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWithdrawals", reflect.TypeOf((*MockDBClientInt)(nil).SelectWithdrawals), arg0)
}

// Start mocks base method.
func (m *MockDBClientInt) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockDBClientIntMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDBClientInt)(nil).Start))
}

// Stop mocks base method.
func (m *MockDBClientInt) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockDBClientIntMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDBClientInt)(nil).Stop))
}

// UpdateBalance mocks base method.
func (m *MockDBClientInt) UpdateBalance(arg0 models.OrderResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockDBClientIntMockRecorder) UpdateBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockDBClientInt)(nil).UpdateBalance), arg0)
}

// UpdateOrder mocks base method.
func (m *MockDBClientInt) UpdateOrder(arg0 models.OrderResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockDBClientIntMockRecorder) UpdateOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockDBClientInt)(nil).UpdateOrder), arg0)
}

// UpdateWithdraw mocks base method.
func (m *MockDBClientInt) UpdateWithdraw(arg0 string, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithdraw", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithdraw indicates an expected call of UpdateWithdraw.
func (mr *MockDBClientIntMockRecorder) UpdateWithdraw(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithdraw", reflect.TypeOf((*MockDBClientInt)(nil).UpdateWithdraw), arg0, arg1)
}
