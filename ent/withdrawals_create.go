// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shipherman/gophermart/ent/withdrawals"
)

// WithdrawalsCreate is the builder for creating a Withdrawals entity.
type WithdrawalsCreate struct {
	config
	mutation *WithdrawalsMutation
	hooks    []Hook
}

// SetOrder sets the "order" field.
func (wc *WithdrawalsCreate) SetOrder(i int) *WithdrawalsCreate {
	wc.mutation.SetOrder(i)
	return wc
}

// SetSum sets the "sum" field.
func (wc *WithdrawalsCreate) SetSum(i int) *WithdrawalsCreate {
	wc.mutation.SetSum(i)
	return wc
}

// Mutation returns the WithdrawalsMutation object of the builder.
func (wc *WithdrawalsCreate) Mutation() *WithdrawalsMutation {
	return wc.mutation
}

// Save creates the Withdrawals in the database.
func (wc *WithdrawalsCreate) Save(ctx context.Context) (*Withdrawals, error) {
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WithdrawalsCreate) SaveX(ctx context.Context) *Withdrawals {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WithdrawalsCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WithdrawalsCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WithdrawalsCreate) check() error {
	if _, ok := wc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Withdrawals.order"`)}
	}
	if _, ok := wc.mutation.Sum(); !ok {
		return &ValidationError{Name: "sum", err: errors.New(`ent: missing required field "Withdrawals.sum"`)}
	}
	return nil
}

func (wc *WithdrawalsCreate) sqlSave(ctx context.Context) (*Withdrawals, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WithdrawalsCreate) createSpec() (*Withdrawals, *sqlgraph.CreateSpec) {
	var (
		_node = &Withdrawals{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(withdrawals.Table, sqlgraph.NewFieldSpec(withdrawals.FieldID, field.TypeInt))
	)
	if value, ok := wc.mutation.Order(); ok {
		_spec.SetField(withdrawals.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := wc.mutation.Sum(); ok {
		_spec.SetField(withdrawals.FieldSum, field.TypeInt, value)
		_node.Sum = value
	}
	return _node, _spec
}

// WithdrawalsCreateBulk is the builder for creating many Withdrawals entities in bulk.
type WithdrawalsCreateBulk struct {
	config
	builders []*WithdrawalsCreate
}

// Save creates the Withdrawals entities in the database.
func (wcb *WithdrawalsCreateBulk) Save(ctx context.Context) ([]*Withdrawals, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Withdrawals, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WithdrawalsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WithdrawalsCreateBulk) SaveX(ctx context.Context) []*Withdrawals {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WithdrawalsCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WithdrawalsCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
