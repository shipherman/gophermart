// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shipherman/gophermart/ent/withdrawals"
)

// Withdrawals is the model entity for the Withdrawals schema.
type Withdrawals struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order string `json:"order,omitempty"`
	// Sum holds the value of the "sum" field.
	Sum          string `json:"sum,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Withdrawals) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case withdrawals.FieldID:
			values[i] = new(sql.NullInt64)
		case withdrawals.FieldOrder, withdrawals.FieldSum:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Withdrawals fields.
func (w *Withdrawals) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case withdrawals.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case withdrawals.FieldOrder:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				w.Order = value.String
			}
		case withdrawals.FieldSum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sum", values[i])
			} else if value.Valid {
				w.Sum = value.String
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Withdrawals.
// This includes values selected through modifiers, order, etc.
func (w *Withdrawals) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// Update returns a builder for updating this Withdrawals.
// Note that you need to call Withdrawals.Unwrap() before calling this method if this Withdrawals
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Withdrawals) Update() *WithdrawalsUpdateOne {
	return NewWithdrawalsClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Withdrawals entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Withdrawals) Unwrap() *Withdrawals {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Withdrawals is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Withdrawals) String() string {
	var builder strings.Builder
	builder.WriteString("Withdrawals(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("order=")
	builder.WriteString(w.Order)
	builder.WriteString(", ")
	builder.WriteString("sum=")
	builder.WriteString(w.Sum)
	builder.WriteByte(')')
	return builder.String()
}

// WithdrawalsSlice is a parsable slice of Withdrawals.
type WithdrawalsSlice []*Withdrawals
