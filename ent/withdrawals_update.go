// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shipherman/gophermart/ent/predicate"
	"github.com/shipherman/gophermart/ent/withdrawals"
)

// WithdrawalsUpdate is the builder for updating Withdrawals entities.
type WithdrawalsUpdate struct {
	config
	hooks    []Hook
	mutation *WithdrawalsMutation
}

// Where appends a list predicates to the WithdrawalsUpdate builder.
func (wu *WithdrawalsUpdate) Where(ps ...predicate.Withdrawals) *WithdrawalsUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetOrder sets the "order" field.
func (wu *WithdrawalsUpdate) SetOrder(i int) *WithdrawalsUpdate {
	wu.mutation.ResetOrder()
	wu.mutation.SetOrder(i)
	return wu
}

// AddOrder adds i to the "order" field.
func (wu *WithdrawalsUpdate) AddOrder(i int) *WithdrawalsUpdate {
	wu.mutation.AddOrder(i)
	return wu
}

// SetSum sets the "sum" field.
func (wu *WithdrawalsUpdate) SetSum(i int) *WithdrawalsUpdate {
	wu.mutation.ResetSum()
	wu.mutation.SetSum(i)
	return wu
}

// AddSum adds i to the "sum" field.
func (wu *WithdrawalsUpdate) AddSum(i int) *WithdrawalsUpdate {
	wu.mutation.AddSum(i)
	return wu
}

// Mutation returns the WithdrawalsMutation object of the builder.
func (wu *WithdrawalsUpdate) Mutation() *WithdrawalsMutation {
	return wu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WithdrawalsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WithdrawalsUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WithdrawalsUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WithdrawalsUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WithdrawalsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(withdrawals.Table, withdrawals.Columns, sqlgraph.NewFieldSpec(withdrawals.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Order(); ok {
		_spec.SetField(withdrawals.FieldOrder, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedOrder(); ok {
		_spec.AddField(withdrawals.FieldOrder, field.TypeInt, value)
	}
	if value, ok := wu.mutation.Sum(); ok {
		_spec.SetField(withdrawals.FieldSum, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedSum(); ok {
		_spec.AddField(withdrawals.FieldSum, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{withdrawals.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WithdrawalsUpdateOne is the builder for updating a single Withdrawals entity.
type WithdrawalsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WithdrawalsMutation
}

// SetOrder sets the "order" field.
func (wuo *WithdrawalsUpdateOne) SetOrder(i int) *WithdrawalsUpdateOne {
	wuo.mutation.ResetOrder()
	wuo.mutation.SetOrder(i)
	return wuo
}

// AddOrder adds i to the "order" field.
func (wuo *WithdrawalsUpdateOne) AddOrder(i int) *WithdrawalsUpdateOne {
	wuo.mutation.AddOrder(i)
	return wuo
}

// SetSum sets the "sum" field.
func (wuo *WithdrawalsUpdateOne) SetSum(i int) *WithdrawalsUpdateOne {
	wuo.mutation.ResetSum()
	wuo.mutation.SetSum(i)
	return wuo
}

// AddSum adds i to the "sum" field.
func (wuo *WithdrawalsUpdateOne) AddSum(i int) *WithdrawalsUpdateOne {
	wuo.mutation.AddSum(i)
	return wuo
}

// Mutation returns the WithdrawalsMutation object of the builder.
func (wuo *WithdrawalsUpdateOne) Mutation() *WithdrawalsMutation {
	return wuo.mutation
}

// Where appends a list predicates to the WithdrawalsUpdate builder.
func (wuo *WithdrawalsUpdateOne) Where(ps ...predicate.Withdrawals) *WithdrawalsUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WithdrawalsUpdateOne) Select(field string, fields ...string) *WithdrawalsUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Withdrawals entity.
func (wuo *WithdrawalsUpdateOne) Save(ctx context.Context) (*Withdrawals, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WithdrawalsUpdateOne) SaveX(ctx context.Context) *Withdrawals {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WithdrawalsUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WithdrawalsUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WithdrawalsUpdateOne) sqlSave(ctx context.Context) (_node *Withdrawals, err error) {
	_spec := sqlgraph.NewUpdateSpec(withdrawals.Table, withdrawals.Columns, sqlgraph.NewFieldSpec(withdrawals.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Withdrawals.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, withdrawals.FieldID)
		for _, f := range fields {
			if !withdrawals.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != withdrawals.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Order(); ok {
		_spec.SetField(withdrawals.FieldOrder, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedOrder(); ok {
		_spec.AddField(withdrawals.FieldOrder, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.Sum(); ok {
		_spec.SetField(withdrawals.FieldSum, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedSum(); ok {
		_spec.AddField(withdrawals.FieldSum, field.TypeInt, value)
	}
	_node = &Withdrawals{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{withdrawals.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
